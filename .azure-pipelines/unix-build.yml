# Script for building CCTBX on linux and macOS
#
# Variables:
#   CACHE_VERSION: unique string
#   PYTHON_VERSION: string in the form of "3.x"

steps:

- checkout: self
  path: ./dials-checkout

- task: Cache@2
  inputs:
    key: '"repositories" | "$(CACHE_VERSION)" | installer/bootstrap.py | "$(Build.SourceBranch)"'
    restoreKeys: |
      "repositories" | "$(CACHE_VERSION)" | installer/bootstrap.py | "refs/heads/master"
    path: $(Pipeline.Workspace)/modules
    cacheHitVar: REPOSITORIES_CACHED
  displayName: Restore repository cache

- script: |
    echo I am here:
    pwd
    echo This is what lives here:
    ls -la
    ls -la *
  displayName: Some basic scripting
  workingDirectory: $(Pipeline.Workspace)

- script: |
    mkdir -p modules
    ln ../dials-checkout modules/dials -nsf
    python modules/dials/installer/bootstrap.py update
  displayName: Update repositories using bootstrap
  workingDirectory: $(Pipeline.Workspace)
  condition: ne(variables.REPOSITORIES_CACHED, 'true')

- script: |
    for repository in cctbx_project dxtbx; do
      if [ ! -e $(Pipeline.Workspace)/modules/${repository} ]; then
        echo Cloning ${repository} from scratch
        git clone https://github.com/cctbx/${repository}.git --depth=1 $(Pipeline.Workspace)/modules/${repository}
      fi

      echo Checking out latest ${repository} commit
      cd $(Pipeline.Workspace)/modules/${repository} || exit 1
      git fetch origin master --depth=1 || exit 2
      git checkout FETCH_HEAD || exit 3
      echo -n "${repository} is at commit "
      git show --oneline -s --no-abbrev-commit || exit 4
    done
  displayName: Update cctbx/dxtbx repository
  workingDirectory: $(Pipeline.Workspace)
  condition: ne(variables.REPOSITORIES_CACHED, 'false')

- script: |
    echo I am here:
    pwd
    echo This is what lives here:
    ls -la
    ls -la *
  displayName: Some basic scripting
  workingDirectory: $(Pipeline.Workspace)

- task: Cache@2
  inputs:
    key: '"base" | "$(CACHE_VERSION)" | "$(Agent.OS)" | "$(PYTHON_VERSION)" | .conda-envs/linux.txt'
    path: $(Pipeline.Workspace)/conda_base
    cacheHitVar: BASE_CACHED
  displayName: Restore cached base environment

- script: |
    python modules/dials/installer/bootstrap.py base --python $(PYTHON_VERSION)
  displayName: Create python $(PYTHON_VERSION) base environment
  workingDirectory: $(Pipeline.Workspace)
  condition: ne(variables.BASE_CACHED, 'true')

- script: |
    echo I am here:
    pwd
    echo This is what lives here:
    ls -la
    ls -la *
  displayName: Some basic scripting
  workingDirectory: $(Pipeline.Workspace)

#- script: |
#    python modules/dials/installer/bootstrap.py build
#  displayName: Build
#  workingDirectory: $(Pipeline.Workspace)

- script: |
    echo I am here:
    pwd
    echo This is what lives here:
    ls -la
    ls -la *
  displayName: Some basic scripting
  workingDirectory: $(Pipeline.Workspace)

#- script: |
#    python modules/dials/installer/bootstrap.py tests
#  displayName: Run tests
#  workingDirectory: $(Pipeline.Workspace)

- script: |
    echo I am here:
    pwd
    echo This is what lives here:
    ls -la
    ls -la *
  displayName: Some basic scripting
  workingDirectory: $(Pipeline.Workspace)

- script: |
    echo Preparing cache
    for repository in modules/*; do
      if [ -e ${repository}/.git ]; then
        echo Cleaning directory ${repository}
        cd ${repository}
        git reset --hard HEAD
        git clean -dffxq
        cd -
      fi
    done
    ls -la modules
  displayName: Preparing cache
  workingDirectory: $(Pipeline.Workspace)
