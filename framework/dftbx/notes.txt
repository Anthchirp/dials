Index: dftbx.cpp
===================================================================
--- dftbx.cpp   (revision 136)
+++ dftbx.cpp   (working copy)
@@ -1,5 +1,39 @@
 #include <dftbx.h>
+#include <boost/random/mersenne_twister.hpp>
+#include <boost/random/uniform_int_distribution.hpp>

+namespace dftbx {
+  size_t work_rl(size_t n)
+  {
+    int_rl rl;
+
+    boost::random::mt19937 gen;
+    boost::random::uniform_int_distribution<> miller(-10, 10);
+
+    for (size_t j = 0; j < n; ++j) {
+      miller_index_t m(miller(gen), miller(gen), miller(gen));
+      rl[m].push_back(miller(gen));
+    }
+
+    return 0;
+  }
+
+  size_t work_rm(size_t n)
+  {
+    int_rm rm;
+
+    boost::random::mt19937 gen;
+    boost::random::uniform_int_distribution<> miller(-10, 10);
+
+    for (size_t j = 0; j < n; ++j) {
+      miller_index_t m(miller(gen), miller(gen), miller(gen));
+      rm.add(m, miller(gen));
+    }
+
+    return 0;
+  }
+}
+
 BOOST_PYTHON_MODULE(dftbx_ext)
 {
   dftbx::init_module();
@@ -10,5 +44,7 @@
     .def("merge", & dftbx::int_ol::merge);
   boost::python::class_<dftbx::int_rl>("int_rl")
     .def("merge", & dftbx::int_rl::merge);
+  boost::python::class_<dftbx::int_rm>("int_rm")
+    .def("merge", & dftbx::int_rl::merge);
 }

Index: dftbx.h
===================================================================
--- dftbx.h     (revision 136)
+++ dftbx.h     (working copy)
@@ -20,6 +20,7 @@
 #include <uctbx.h>
 #include <cctype>
 #include <map>
+#include <boost/tr1/unordered_map.hpp>
 #include <algorithm>

 namespace dftbx {
@@ -119,7 +120,61 @@
   typedef ObservationList<int> int_ol;
   typedef ReflectionList<int> int_rl;

+  template <class T>
+    class ReflectionMap {
+  public:

+    typedef ObservationList<T> observation_list_t;
+
+    typedef boost::unordered_multimap<miller_index_t, T> map_type;
+    typedef typename map_type::iterator map_iterator_type;
+    typedef typename map_type::value_type value_type;
+
+    observation_list_t & operator[](miller_index_t hkl) {
+      observation_list_t result;
+      auto range = reflections_.equal_range(hkl);
+      for (map_iterator_type mi = range.first; mi != range.second; ++mi) {
+       result.push_back(mi->second);
+      }
+      return result;
+    }
+
+    const observation_list_t & operator[](miller_index_t hkl) const {
+      observation_list_t result;
+      auto range = reflections_.equal_range(hkl);
+      for (map_iterator_type mi = range.first; mi != range.second; ++mi) {
+       result.push_back(mi->second);
+      }
+      return result;
+    }
+
+    void merge(ReflectionList<T> & other) {
+      for (map_iterator_type mi = other.begin(); mi != other.end(); ++mi) {
+       reflections_.insert(mi->second);
+      }
+    }
+
+    void add(miller_index_t m, T t) {
+      reflections_.insert(value_type(m, t));
+    }
+
+    map_iterator_type begin() {
+      return reflections_.cbegin();
+    }
+
+    map_iterator_type end() {
+      return reflections_.cend();
+    }
+
+  private:
+    map_type reflections_;
+
+  };
+
+  typedef ReflectionMap<int> int_rm;
+
+  size_t work_rl(size_t n);
+  size_t work_rm(size_t n);
 }

 #endif
